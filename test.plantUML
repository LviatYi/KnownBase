@startuml Facade_ClassDiagram
hide empty members

class Client
class Facade
class SubSystemA
class SubSystemB
class SubSystemC

Client ..> Facade
Facade --> SubSystemA
Facade --> SubSystemB
Facade --> SubSystemC

@enduml

@startuml Facade_SequenceDiagram
participant ":Client" as Client
participant ":Facade" as Facade
participant ":SystemA" as SystemA
participant ":SystemB" as SystemB

Client -> Facade ++:<<create>>
create SystemA
Facade-->SystemA:<<create>>
create SystemB
Facade-->SystemB:<<create>>
deactivate Facade
Client -> Facade ++: wrapOpration( )
Facade -> SystemA ++:operationA( )
Facade -> SystemB ++:operationB( )
@enduml

@startuml Decorator_Example
hide empty members
abstract Component{
    + display() : void
}
class Window{
    + display() : void
}
class Textbox {
    + display() : void
}
class ListBox{
    + display() : void
}
class ComponentDecorator{
    - component : Component
    + ComponentDecorator(Component component)
    + display() : void
}
class ScrollBarDecorator{
    + ScrollBarDecorator(Component component)
    + display() : void
    + setScrollBar() : void
}
class BlackBorderDecorator{
    + BlackBorderDecorator(Component component)
    + display() : void
    + setBlackBorder() : void
}

Component <|-- Window
Component <|-- Textbox
Component <|-- ListBox
Component <|-- ComponentDecorator
Component <-right-o ComponentDecorator
ComponentDecorator <|-- ScrollBarDecorator
ComponentDecorator <|-- BlackBorderDecorator
@enduml